import pandas as pd
import requests
import numpy as np
from collections import defaultdict
from concurrent.futures import ThreadPoolExecutor

# OpenWeatherMap API key
WEATHER_API_KEY = "686810d738e10e4b20cf4f81ae5e0705"

# ✅ State capital coordinates (for fast lookup)
STATE_CAPITAL_COORDS = {
    "Alabama": (32.3770, -86.3000),
    "Alaska": (58.3019, -134.4197),
    "Arizona": (33.4484, -112.0740),
    "Arkansas": (34.7465, -92.2896),
    "California": (38.5767, -121.4936),
    "Colorado": (39.7392, -104.9903),
    "Connecticut": (41.7658, -72.6734),
    "Delaware": (39.1582, -75.5244),
    "Florida": (30.4383, -84.2807),
    "Georgia": (33.7490, -84.3880),
    "Hawaii": (21.3070, -157.8584),
    "Idaho": (43.6150, -116.2023),
    "Illinois": (39.7980, -89.6440),
    "Indiana": (39.7684, -86.1581),
    "Iowa": (41.5868, -93.6250),
    "Kansas": (39.0473, -95.6752),
    "Kentucky": (38.1867, -84.8753),
    "Louisiana": (30.4571, -91.1874),
    "Maine": (44.3106, -69.7795),
    "Maryland": (38.9784, -76.4922),
    "Massachusetts": (42.3601, -71.0589),
    "Michigan": (42.7337, -84.5555),
    "Minnesota": (44.9537, -93.0900),
    "Mississippi": (32.2988, -90.1848),
    "Missouri": (38.5767, -92.1735),
    "Montana": (46.5891, -112.0391),
    "Nebraska": (40.8136, -96.7026),
    "Nevada": (39.1638, -119.7674),
    "New Hampshire": (43.1939, -71.5724),
    "New Jersey": (40.2206, -74.7597),
    "New Mexico": (35.6868, -105.9378),
    "New York": (42.6526, -73.7562),
    "North Carolina": (35.7796, -78.6382),
    "North Dakota": (46.8083, -100.7837),
    "Ohio": (39.9612, -82.9988),
    "Oklahoma": (35.4676, -97.5164),
    "Oregon": (44.9429, -123.0351),
    "Pennsylvania": (40.2732, -76.8867),
    "Rhode Island": (41.8309, -71.4146),
    "South Carolina": (34.0007, -81.0348),
    "South Dakota": (44.3670, -100.3364),
    "Tennessee": (36.1627, -86.7816),
    "Texas": (30.2672, -97.7431),
    "Utah": (40.7608, -111.8910),
    "Vermont": (44.2601, -72.5754),
    "Virginia": (37.5407, -77.4360),
    "Washington": (47.0379, -122.9007),
    "West Virginia": (38.3364, -81.6123),
    "Wisconsin": (43.0747, -89.3844),
    "Wyoming": (41.1400, -104.8202)
}

# ✅ Get temperature using OpenWeatherMap API
def get_temperature(lat, lon):
    url = f"http://api.openweathermap.org/data/2.5/weather?lat={lat}&lon={lon}&appid={WEATHER_API_KEY}&units=imperial"
    response = requests.get(url)
    if response.status_code == 200:
        return response.json()['main']['temp']
    return None

# ✅ Get average temperature for states along the route
def calculate_avg_temp(states):
    state_temp = defaultdict(list)

    def fetch_temp(state):
        if state in STATE_CAPITAL_COORDS:
            lat, lon = STATE_CAPITAL_COORDS[state]
            temp = get_temperature(lat, lon)
            if temp is not None:
                state_temp[state].append(temp)

    with ThreadPoolExecutor(max_workers=5) as executor:
        executor.map(fetch_temp, states)

    return {state: np.mean(temps) for state, temps in state_temp.items()}

# ✅ Recommend truck type based on temperature
def recommend_truck_type(avg_temp):
    if 40 <= avg_temp <= 60:
        return "Dry Truck (40°F - 60°F)"
    else:
        return "Reefer Truck (Outside 40°F - 60°F)"

# ✅ Process route
def process_route(pickup_zip, dropoff_zip, states):
    print(f"\n🚛 Processing Route: {pickup_zip} → {dropoff_zip}")

    # ✅ Step 1: Get weather for each state
    state_avg_temp = calculate_avg_temp(states)

    # ✅ Step 2: Get overall average temp
    overall_avg_temp = np.mean(list(state_avg_temp.values()))

    # ✅ Step 3: Recommend truck type
    truck_type = recommend_truck_type(overall_avg_temp)

    # ✅ Step 4: Format and display output
    state_temp_str = ', '.join(
        f"{state}: {round(temp, 1)}°F" for state, temp in state_avg_temp.items()
    )

    print(f"🌡️ State Temperatures: {state_temp_str}")
    print(f"📉 Overall Average Temperature: {round(overall_avg_temp, 1)}°F")
    print(f"🚚 Recommended Truck Type: {truck_type}\n")

# ✅ MAIN FUNCTION
def main():
    # ✅ Load data from Excel
    file_path = 'route_unique_data.xlsx'
    df = pd.read_excel(file_path)

    # ✅ Clean data types and strip whitespace
    df['Pick Zip'] = df['Pick Zip'].astype(str).str.strip()
    df['Drop Zip'] = df['Drop Zip'].astype(str).str.strip()

    # ✅ Take user input for pickup and drop-off pin codes
    pickup_zip = '04103-1007'#input("Enter the pickup zip code: ").strip()
    dropoff_zip = input("Enter the drop-off zip code: ").strip()

    # ✅ Find matching row in DataFrame
    match = df.loc[
        (df['Pick Zip'] == pickup_zip) & 
        (df['Drop Zip'] == dropoff_zip)
    ]

    if not match.empty:
        pickup = match.iloc[0]['Pickup Location']
        dropoff = match.iloc[0]['Dropoff Location']
        states = match.iloc[0]['States Along Route'].split(', ') if pd.notna(match.iloc[0]['States Along Route']) else []
        
        if pickup and dropoff and states:
            process_route(pickup_zip, dropoff_zip, states)
        else:
            print("❌ Missing data in matched route.")
    else:
        print("❌ No matching route found.")

# ✅ Run the program
if __name__ == "__main__":
    main()